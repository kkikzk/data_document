#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'src_lexer'
module DataDocument

class DocParser < Racc::Parser

module_eval(<<'...end doc_parser.y/module_eval...', 'doc_parser.y', 87)
def parse(str)
  keywords = [
    'enum',
    'struct',
    'unnamed_struct',
    'int64',
    'int32',
    'int16',
    'int8',
    'uint64',
    'uint32',
    'uint16',
    'uint8',
    'bool',
    'string',
    'decimal',
    'float',
    'double',
    'char',
    'double'
  ]
  symbols = [
    ',',
    ';',
    '=',
    '..',
    ':',
    '{',
    '}',
    '(',
    ')',
    '[',
    ']'
  ]
  @lexer = SrcLexer::Lexer.new(keywords, symbols, ['"', '"'], '//', ['/*', '*/'])
  @lexer.analyze(str)
  do_parse()
end

def next_token
  @lexer.pop_token
end

def on_error(error_token_id, error_value, value_stack)
  line_no = error_value.line_no.to_s
	char_no = error_value.char_no.to_s
	raise 'Syntax error : Token="' + error_value.str + '", Pos=[' + line_no + ', ' + char_no + ']'
end

...end doc_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    70,    70,     7,    75,    74,    25,    17,     8,    31,    16,
    58,     9,    73,    80,    26,    54,     8,    27,    79,    29,
    30,    86,    87,     8,    28,    20,    18,    55,    71,    71,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    32,    37,    15,    56,    13,    59,
    60,    61,    63,    65,    65,    14,    72,    13,    76,    78,
    10,    81,    82,    83,    84,    85,     2,     6,    89 ]

racc_action_check = [
    63,    80,     5,    65,    65,    18,    11,     5,    23,    11,
    37,     5,    65,    68,    18,    33,    23,    19,    68,    21,
    21,    78,    78,    33,    20,    14,    13,    33,    63,    80,
    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    33,    25,    31,    10,    34,    17,    38,
    39,    55,    59,    60,    62,     9,    64,     8,    66,    67,
     7,    70,    71,    74,    75,    77,     1,     2,    81 ]

racc_action_pointer = [
   nil,    66,    67,   nil,   nil,    -3,   nil,    58,    55,    53,
    40,    -2,   nil,    14,    10,   nil,   nil,    46,     1,    11,
    22,    12,   nil,     6,   nil,    31,   nil,   nil,   nil,   nil,
   nil,    36,   nil,    13,    40,   nil,   nil,     7,    47,    48,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,    40,
    43,   nil,    44,    -3,    40,     1,    51,    50,     5,   nil,
    30,    59,   nil,   nil,    52,    53,   nil,    49,    18,   nil,
    -2,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,    -8,   -52,    -2,    -3,   -52,    90,   -52,   -52,   -52,
   -52,   -52,   -10,   -52,   -15,    -8,    -9,   -52,   -52,   -52,
   -52,   -52,    -5,   -52,   -11,   -52,   -13,    -8,   -16,    -4,
    -8,   -52,   -12,   -52,    -8,   -17,    -6,   -52,   -52,   -52,
   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,   -52,   -14,   -18,    -7,   -37,
   -45,    -8,   -45,   -52,   -52,   -52,    -8,   -49,   -52,   -39,
   -44,   -52,   -20,   -46,   -52,   -52,   -36,   -52,   -52,   -38,
   -52,   -42,   -43,   -47,   -48,   -19,   -50,   -51,   -40,   -41 ]

racc_goto_table = [
    34,    57,     5,    69,    22,    12,    64,    38,    67,    19,
     4,     3,    11,    62,    24,    21,    23,    77,    39,    36,
    88,    68,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,    57,    66 ]

racc_goto_check = [
    10,    11,     4,    18,     6,     8,    14,    12,    14,     9,
     3,     2,     7,    13,     8,     5,     4,    15,    16,     6,
    18,    17,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,    11,    10 ]

racc_goto_pointer = [
   nil,    22,    10,     9,     1,     0,   -11,     4,    -3,    -5,
   -27,   -33,   -26,   -46,   -54,   -50,   -15,   -42,   -60 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 33, :_reduce_1,
  2, 33, :_reduce_2,
  2, 33, :_reduce_3,
  6, 34, :_reduce_4,
  1, 37, :_reduce_5,
  3, 37, :_reduce_6,
  4, 38, :_reduce_7,
  0, 36, :_reduce_8,
  4, 36, :_reduce_9,
  1, 39, :_reduce_10,
  3, 39, :_reduce_11,
  4, 40, :_reduce_12,
  3, 40, :_reduce_13,
  7, 35, :_reduce_14,
  0, 41, :_reduce_15,
  2, 41, :_reduce_16,
  1, 42, :_reduce_17,
  2, 42, :_reduce_18,
  7, 43, :_reduce_19,
  5, 43, :_reduce_20,
  1, 44, :_reduce_21,
  1, 44, :_reduce_22,
  1, 44, :_reduce_23,
  1, 44, :_reduce_24,
  1, 44, :_reduce_25,
  1, 44, :_reduce_26,
  1, 44, :_reduce_27,
  1, 44, :_reduce_28,
  1, 44, :_reduce_29,
  1, 44, :_reduce_30,
  1, 44, :_reduce_31,
  1, 44, :_reduce_32,
  1, 44, :_reduce_33,
  1, 44, :_reduce_34,
  1, 44, :_reduce_35,
  4, 48, :_reduce_36,
  0, 45, :_reduce_37,
  3, 45, :_reduce_38,
  1, 49, :_reduce_39,
  3, 49, :_reduce_40,
  3, 50, :_reduce_41,
  2, 50, :_reduce_42,
  2, 50, :_reduce_43,
  1, 50, :_reduce_44,
  0, 46, :_reduce_45,
  2, 46, :_reduce_46,
  3, 46, :_reduce_47,
  3, 46, :_reduce_48,
  0, 47, :_reduce_49,
  2, 47, :_reduce_50,
  2, 47, :_reduce_51 ]

racc_reduce_n = 52

racc_shift_n = 90

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENT => 2,
  :NUMBER => 3,
  :STRING => 4,
  "enum" => 5,
  "{" => 6,
  "}" => 7,
  "," => 8,
  "=" => 9,
  "[" => 10,
  "]" => 11,
  "(" => 12,
  ")" => 13,
  "struct" => 14,
  ":" => 15,
  ";" => 16,
  "int64" => 17,
  "int32" => 18,
  "int16" => 19,
  "int8" => 20,
  "uint64" => 21,
  "uint32" => 22,
  "uint16" => 23,
  "uint8" => 24,
  "bool" => 25,
  "string" => 26,
  "decimal" => 27,
  "float" => 28,
  "double" => 29,
  "char" => 30,
  ".." => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENT",
  "NUMBER",
  "STRING",
  "\"enum\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"=\"",
  "\"[\"",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "\"struct\"",
  "\":\"",
  "\";\"",
  "\"int64\"",
  "\"int32\"",
  "\"int16\"",
  "\"int8\"",
  "\"uint64\"",
  "\"uint32\"",
  "\"uint16\"",
  "\"uint8\"",
  "\"bool\"",
  "\"string\"",
  "\"decimal\"",
  "\"float\"",
  "\"double\"",
  "\"char\"",
  "\"..\"",
  "$start",
  "document",
  "enum",
  "struct",
  "attributes",
  "enum_decl",
  "each_enum_decl",
  "attribute_decl",
  "each_attribute_decl",
  "base_type_decl",
  "struct_element_decl",
  "each_struct_element_decl",
  "type_decl",
  "condition_decl",
  "array_decl",
  "default_value_decl",
  "unnamed_struct",
  "condition_decls",
  "each_condition_decl" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'doc_parser.y', 6)
  def _reduce_1(val, _values, result)
     result = ParseResult.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 7)
  def _reduce_2(val, _values, result)
     val[0].add_enum(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 8)
  def _reduce_3(val, _values, result)
     val[0].add_struct(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 11)
  def _reduce_4(val, _values, result)
     result = EnumData.new(val[2].str, val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 13)
  def _reduce_5(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 14)
  def _reduce_6(val, _values, result)
     val[0].push(val[2]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 17)
  def _reduce_7(val, _values, result)
     result = EnumElement.new(val[1].str, val[0], val[3].str) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 19)
  def _reduce_8(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 20)
  def _reduce_9(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 22)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 23)
  def _reduce_11(val, _values, result)
     val[0].push(val[2]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 25)
  def _reduce_12(val, _values, result)
     result = Attribute.new(val[0].str, val[2].str) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 26)
  def _reduce_13(val, _values, result)
     result = Attribute.new(val[0].str, '') 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 29)
  def _reduce_14(val, _values, result)
     result = StructData.new(val[2].str, val[0], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 31)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 32)
  def _reduce_16(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 34)
  def _reduce_17(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 35)
  def _reduce_18(val, _values, result)
     val[0].push(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 38)
  def _reduce_19(val, _values, result)
     result = StructElement.new(val[2].str, val[0], val[1], val[3], val[4], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 40)
  def _reduce_20(val, _values, result)
     result = StructElement.new(val[2].str, val[0], val[1], nil, val[3], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 42)
  def _reduce_21(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 43)
  def _reduce_22(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 44)
  def _reduce_23(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 45)
  def _reduce_24(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 46)
  def _reduce_25(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 47)
  def _reduce_26(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 48)
  def _reduce_27(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 49)
  def _reduce_28(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 50)
  def _reduce_29(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 51)
  def _reduce_30(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 52)
  def _reduce_31(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 53)
  def _reduce_32(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 54)
  def _reduce_33(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 55)
  def _reduce_34(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 56)
  def _reduce_35(val, _values, result)
     result = val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 59)
  def _reduce_36(val, _values, result)
     result = StructData.new('unnamed_struct', [], nil, val[2].str) 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 61)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 62)
  def _reduce_38(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 64)
  def _reduce_39(val, _values, result)
     result = [val[0].str] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 65)
  def _reduce_40(val, _values, result)
     val[0].push(val[2].str); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 67)
  def _reduce_41(val, _values, result)
     result = val[0].str + '..' + val[2].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 68)
  def _reduce_42(val, _values, result)
     result = val[0].str + '..Max' 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 69)
  def _reduce_43(val, _values, result)
     result = 'Min..' + val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 70)
  def _reduce_44(val, _values, result)
     result = val[0].str + '..' + val[0].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 72)
  def _reduce_45(val, _values, result)
     result = '1' 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 73)
  def _reduce_46(val, _values, result)
     result = '-1' 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 74)
  def _reduce_47(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 75)
  def _reduce_48(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 77)
  def _reduce_49(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 78)
  def _reduce_50(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

module_eval(<<'.,.,', 'doc_parser.y', 79)
  def _reduce_51(val, _values, result)
     result = val[1].str 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DocParser

end
